This is not really integrated into react any more than the fact that React renders a div and a ref to that div gets passed to the constructor of the blockMirror object.

blockMirror constructor is the start point.

The blockMirror constructor creates the other DOM elements (plain JS appending to DOM)

it also calls configure on the Skulpt object, because Skulp is not an ES6 module and I've not looked much at how it works I've left that just loaded using a script tag for now, this means there's a global SK object.

the blockMirror constructor finally creates the 3 object which do the work,

1. textToBlocks = contains the stuff that calls skulpt with the code to convert it into an AST and also the stuff to convert the AST into XML for Blockly, 

- look for the convertSource(filename, python_source) method to see where that starts, it calls skulpt.parse to parse the python into lexemes (hey computer science class finally came  in useful) and then calls skulpt.astFromParse to get the abstract syntax tree (ast) . The ast is JS (kind of JSONy looking but just a native JS data structure)

2. textEditor = wraps codemirror and handles the get and set methods for code in codemirror

3. blockEditor = wraps Blockly, sets up the toolbox config (the bit with on the left of blockly) and handles get and set of blockly's code

there's various config files;
- color.config = holds colour values which blockly uses for categories of blocks 
- function_signatures.config, method_signatures.config, module_function_signatures.config - these enable certain functions and methods to be converted into a canonical 'block', the module_function_signatures one in this case is entirely for a turtle module used on https://think.cs.vt.edu/blockpy/ but seems useful guide so left it in
- toolbox.config = defines the left hand toolbox for blockly

then finally there's a ast folder which has behaviour to deal with each of the node types you might possibly have in the ast produced by skulpt, some of these are short and some are long, each file seems to consist of the function that gets called by the xml generator, in the format

BlockMirrorTextToBlocks.prototype[*ast node type*] = function (node, parent) 

and an object which lives in the BlockMirrorTextToBlocks.BLOCKS array

and a function is usually added to Blockly.Python, this keeps the block and the code connected, when it's removed then you can still generate a block from the code but when you edit that block it doesn't regenerate the code any more.

Probably a key bit of understanding is what is in each of these files and how that works....

